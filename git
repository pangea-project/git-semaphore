#!/usr/bin/env ruby
# frozen_string_literal: true
#
# Copyright (C) 2014-2022 Harald Sitter <sitter@kde.org>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) version 3, or any
# later version accepted by the membership of KDE e.V. (or its
# successor approved by the membership of KDE e.V.), which shall
# act as a proxy defined in Section 6 of version 3 of the license.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library.  If not, see <http://www.gnu.org/licenses/>.

require_relative 'lib/service'

NETWORK_COMMANDS = %w(pull clone fetch push ls-remote).freeze
HOSTS = {
  'git.debian.org' => :debian,
  'invent.kde.org' => :kde,
  # Neon uses the same limit! Since the semaphore has 5 locks and the server
  # side limit is ~15 now we should be fine eitherway though.
  'invent.kde.org/neon' => :neon
}.freeze

def run(args)
  system('/usr/bin/git', *args)
  $?.exitstatus
end

# Only sync network-io commands. Local commands do not benefit from being
# locked which in turn only slows down the entire affair by an incredible
# amount.
synchronize = false
NETWORK_COMMANDS.each do |c|
  if ARGV.include?(c)
    synchronize = true
    break
  end
end

exit_code = 0
if synchronize
  monitor = Service.start
  host = nil
  # FIXME: this needs isolation in a class for testing and such
  HOSTS.each do |h, sym|
    if ARGV.join.include?(h)
      host = sym
      break
    end
  end
  monitor.synchronize(Process.pid, host) do
    exit_code = run(ARGV)
  end
else
  exit_code = run(ARGV)
end

exit exit_code
